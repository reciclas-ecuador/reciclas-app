// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Reach an agreement: We can also use @db.VarChar(255) instead of String
model Collaborator {
  id String @unique @default(uuid())
  email String @id
  ci       String   @unique @db.VarChar(10)
  name String 
  phone String @db.VarChar(10)
  status String @default("active")
  province String
  city String
  address String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Collaborator has many logActionCollaborators 
  logActionCollaborators LogActionsCollaborator[]

  @@map("collaborators")
}

model Location {
  id Int @id @default(autoincrement())
  province String
  city String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Location has many collectCenters
  collectCenters CollectCenter[]

  @@map("locations")
}

model CenterEmployee {
  id String @unique @default(uuid())
  email String @id
  name String
  phone String @db.VarChar(10)
  status String @default("active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // One to one: with CollectCenter
  collectCenterSupervised CollectCenter? @relation("collect_center_manager")

  // One to many: with CollectCenter
  collectCenter CollectCenter @relation("collect_center_employees", fields: [collectCenterId], references: [id], onDelete: Cascade) 
  collectCenterId Int @map("collect_center_id")

  // CenterEmployee has many logActionCollaborators
  logActionCollaborators LogActionsCollaborator[]

  @@map("center_employees")
}

model CollectCenter {
  id Int @id @default(autoincrement())
  name String
  hash String @unique
  address String
  lat String
  lng String
  status String @default("active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Foreign key: with Location
  location Location @relation(fields: [locationId], references: [id])
  locationId Int @map("location_id")

  // Foreign key: with CenterEmployee - One to one
  manager CenterEmployee? @relation("collect_center_manager", fields: [managerEmail], references: [email], onDelete: SetNull)
  managerEmail String? @unique @map("center_employee_email")

  // Foreign key: with CenterEmployee - One to many
  collectCenterEmployees CenterEmployee[] @relation("collect_center_employees")

  // CollectCenter has many logActionCollaborators
  logActionCollaborators LogActionsCollaborator[]

  @@map("collect_centers")
}

model LogActionsCollaborator {
  id Int @id @default(autoincrement())
  submitDate DateTime @map("submit_date")
  quantity Float
  attentionQuality Int? @map("attention_quality")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Foreign key: with Collaborator
  collaborator Collaborator @relation(fields: [collaboratorEmail], references: [email], onDelete: Cascade)
  collaboratorEmail String @map("collaborator_email")

  // Foreign key: with CollectCenter
  collectCenter CollectCenter @relation(fields: [collectCenterId], references: [id], onDelete: Cascade)
  collectCenterId Int @map("collect_center_id")

  // Foreign key: with CenterEmployee
  receiver CenterEmployee @relation(fields: [receiverEmail], references: [email], onDelete: Cascade)
  receiverEmail String @map("receiver_id")

  // LogActionsCollaborator has many observations
  observations Observation[]

  @@map("log_actions_collaborator")
}

model Observation {
  id Int @id @default(autoincrement())
  comment String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Foreign keys: with LogActionsCollaborator
  logActionsCollaborator LogActionsCollaborator @relation(fields: [logActionsCollaboratorId], references: [id])
  logActionsCollaboratorId Int @map("log_actions_collaborator_id")

  @@map("observations")
}